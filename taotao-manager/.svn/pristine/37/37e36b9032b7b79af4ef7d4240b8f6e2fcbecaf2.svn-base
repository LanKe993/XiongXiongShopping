package com.taotao.service.impl;

import java.util.Date;
import java.util.List;

import org.apache.solr.client.solrj.SolrServer;
import org.apache.solr.common.SolrInputDocument;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import com.taotao.common.pojo.EUDataGridResult;
import com.taotao.common.pojo.TaotaoResult;
import com.taotao.common.utils.ExceptionUtil;
import com.taotao.common.utils.IDUtils;
import com.taotao.mapper.TbItemCatMapper;
import com.taotao.mapper.TbItemDescMapper;
import com.taotao.mapper.TbItemMapper;
import com.taotao.mapper.TbItemParamItemMapper;
import com.taotao.pojo.TbItem;
import com.taotao.pojo.TbItemCat;
import com.taotao.pojo.TbItemDesc;
import com.taotao.pojo.TbItemExample;
import com.taotao.pojo.TbItemExample.Criteria;
import com.taotao.pojo.TbItemParamItem;
import com.taotao.service.ItemService;


/**
 * <p>Title: ItemServiceImpl</p>
 * <p>Description: </p>
 * <p>Company: www.itcast.com</p> 
 * @author	吕浩
 * @date	2019年10月9日下午5:57:55
 * @version 1.0
 */
@Service
public class ItemServiceImpl implements ItemService {

	@Autowired
	private TbItemMapper itemMapper;
	
	@Autowired
	private TbItemDescMapper itemDestMapper;
	
	@Autowired
	private TbItemParamItemMapper itemParamItemMapper;
	
	@Autowired
	private TbItemCatMapper itemCatMapper;
	
	@Autowired
	private SolrServer solrServer;

//	@Value("${SOLR_SEARCH_SINGLE_ITEM_URL}")
//	private String SOLR_SEARCH_SINGLE_ITEM_URL;
	
	@Override
	public TbItem getItemById(long itemId) {

		//TbItem item = itemMapper.selectByPrimaryKey(itemId);
		TbItemExample example = new TbItemExample();
		// 创建查询条件
		Criteria criteria = example.createCriteria();
		criteria.andIdEqualTo(itemId);
		List<TbItem> list = itemMapper.selectByExample(example);
		if(list != null && list.size()>0){
			TbItem item = list.get(0);
			return item;
		}
		return null;
	}

	/**
	 * 商品列表查询
	 * <p>Title: getItemList</p>
	 * <p>Description: </p>
	 * @param page
	 * @param rows
	 * @return
	 * @see com.taotao.service.ItemService#getItemList(long, long)
	 */
	@Override
	public EUDataGridResult getItemList(int page, int rows) {

		// 查询商品列表
		TbItemExample example = new TbItemExample();
		// 分页处理
		PageHelper.startPage(page, rows);
		List<TbItem> list = itemMapper.selectByExample(example);
		// 创建一个返回值对象
		EUDataGridResult result = new EUDataGridResult();
		result.setRows(list);
		// 取记录总条数
		PageInfo<TbItem> pageInfo = new PageInfo<>(list);
		result.setTotal(pageInfo.getTotal());
		return result;
	}

	
	/**
	 * <p>Title: createItem</p>
	 * <p>Description: </p>
	 * @param item
	 * @param desc
	 * @return
	 * @throws Exception
	 * @see com.taotao.service.ItemService#createItem(com.taotao.pojo.TbItem, java.lang.String)
	 */
	@Override
	public TaotaoResult createItem(TbItem item, String desc, String itemParam) throws Exception {
		// 生成商品ID
		Long itemId = IDUtils.genItemId();
		// 设置商品ID
		item.setId(itemId);
		// 设置商品状态
		item.setStatus((byte) 1);
		// 创建时间
		item.setCreated(new Date());
		// 更新时间
		item.setUpdated(new Date());
		// 插入到数据库
		itemMapper.insert(item);
		// 添加商品描述信息
		TaotaoResult result = insertItemDesc(itemId, desc);
		if (result.getStatus() != 200) {
			throw new Exception();
		}
		
		// 添加规格参数
		result = insertItemParamItem(itemId, itemParam);
		if (result.getStatus() != 200) {
			throw new Exception();
		}
		
		//查询商品类目
		TbItemCat itemCat = new TbItemCat();
		itemCat = itemCatMapper.selectByPrimaryKey(item.getCid()); 
		try {
			// 把商品信息写入索引库
			// 创建一个SolrInputDocument对象
			SolrInputDocument document = new SolrInputDocument();
			document.setField("id", item.getId());
			document.setField("item_title", item.getTitle());
			document.setField("item_sell_point", item.getSellPoint());
			document.setField("item_price", item.getPrice());
			document.setField("item_image", item.getImage());
			document.setField("item_category_name", itemCat.getName());
			document.setField("item_desc", desc);
			// 写入索引库
			solrServer.add(document);

			// 提交修改
			solrServer.commit();
		} catch (Exception e) {
			e.printStackTrace();
			return TaotaoResult.build(500, ExceptionUtil.getStackTrace(e));
		}
		
		// 根据cid在tbitemcat表中取得name字段数据
//		TbItemCat itemCat = new TbItemCat();
//		itemCat = itemCatMapper.selectByPrimaryKey(item.getCid());
		
		// 装配doget参数
//		HashMap<String, String> doGetParam = new HashMap<String, String>();
//		doGetParam.put("id", Long.toString(item.getId()));
//		doGetParam.put("item_title", item.getTitle());
//		doGetParam.put("item_sell_point", item.getSellPoint());
//		doGetParam.put("item_price", Long.toString(item.getPrice()));
//		doGetParam.put("item_image", item.getImage());
//		doGetParam.put("item_category_name", itemCat.getName());
//		doGetParam.put("item_desc", desc);
//		
//		try {
//			// 向search服务传递参数
//			HttpClientUtil.doPost(SOLR_SEARCH_SINGLE_ITEM_URL, doGetParam);
//			
//		} catch (Exception e) {
//			e.printStackTrace();
//			// 向管理员发邮件等操作
//		}
		
		return TaotaoResult.ok();
	}

	/**
	 * <p>Title: insertItemParam</p>
	 * <p>Description: </p>
	 * @param itemId
	 * @param desc
	 * @return
	 */
	private TaotaoResult insertItemParamItem(Long itemId, String itemParam){
		// 创建一个pojo
		TbItemParamItem itemParamItem = new TbItemParamItem();
		itemParamItem.setItemId(itemId);
		itemParamItem.setParamData(itemParam);
		itemParamItem.setCreated(new Date());
		itemParamItem.setUpdated(new Date());
		// 向表中插入数据
		itemParamItemMapper.insert(itemParamItem);
		return TaotaoResult.ok();
		
	}
	
	/**
	 * <p>Title: insertItemDesc</p>
	 * <p>Description: </p>
	 * @param itemId
	 * @param desc
	 * @return
	 */
	private TaotaoResult insertItemDesc(Long itemId, String desc){
		TbItemDesc itemDesc = new TbItemDesc();
		itemDesc.setItemId(itemId);
		itemDesc.setItemDesc(desc);
		itemDesc.setCreated(new Date());
		itemDesc.setUpdated(new Date());
		itemDestMapper.insert(itemDesc);
		
		return TaotaoResult.ok();
	}
}