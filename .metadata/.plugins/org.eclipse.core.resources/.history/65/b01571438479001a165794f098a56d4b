package com.taotao.sso.service.impl;

import java.util.Date;
import java.util.List;
import java.util.UUID;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.util.DigestUtils;

import com.taotao.common.pojo.TaotaoResult;
import com.taotao.common.utils.JsonUtils;
import com.taotao.mapper.TbUserMapper;
import com.taotao.pojo.TbUser;
import com.taotao.pojo.TbUserExample;
import com.taotao.pojo.TbUserExample.Criteria;
import com.taotao.sso.dao.JedisClient;
import com.taotao.sso.service.UserService;

/** 
* @description:用户管理service
* @author: hlv
* @date：2020年4月7日 下午4:53:45 
* 类说明 
*/

@Service
public class UserServiceImpl implements UserService {

	@Autowired
	private TbUserMapper userMapper;
	
	@Autowired
	private JedisClient jedisClient;
	
	@Value("${REDIS_USER_SESSION_KEY}")
	private String REDIS_USER_SESSION_KEY;
	
	@Value("${SSO_SESSION_EXPIRE}")
	private Integer SSO_SESSION_EXPIRE;
	
	@Override
	public TaotaoResult checkData(String content, Integer type) {
		// 创建查询条件
		TbUserExample userExample = new TbUserExample();
		Criteria criteria = userExample.createCriteria();
		// 对数据进行校验：1,2,3分别代表username，phone，email
		// 用户名校验
		if (1 == type) {
			criteria.andUsernameEqualTo(content);
		// 电话号校验
		} else if (2 == type) {
			criteria.andPhoneEqualTo(content);
		// 邮件校验
		} else {
			criteria.andEmailEqualTo(content);
		}
		
		List<TbUser> list = userMapper.selectByExample(userExample);
		if (list == null || list.size() ==0) {
			return TaotaoResult.ok(true);
		}
		return TaotaoResult.ok(false);
	}
	
	/*
	 *用户信息注册 
	 */
	@Override
	public TaotaoResult createtUser(TbUser tbUser) {

		tbUser.setCreated(new Date());
		tbUser.setUpdated(new Date());
		// 密码md5加密
		tbUser.setPassword(DigestUtils.md5DigestAsHex(tbUser.getPassword().getBytes()));
		userMapper.insert(tbUser);
		return TaotaoResult.ok();
	}

	@Override
	public TaotaoResult userLogin(String username, String password) {

		// 创建查询条件
		TbUserExample example = new TbUserExample();
		Criteria criteria = example.createCriteria();
		criteria.andUsernameEqualTo(username);
		List<TbUser> list = userMapper.selectByExample(example);
		
		// 1、判断用户是否存在
		if (null == list || list.size() == 0) {
			return TaotaoResult.build(400, "用户名或密码错误");
		}
		
		// 2、判断密码是否匹配
		TbUser user = list.get(0);
		if (!DigestUtils.md5DigestAsHex(password.getBytes()).equals(user.getPassword())) {
			return TaotaoResult.build(400, "用户名或密码错误");
		}
		
		// 情况密码
		user.setPassword(null);
		// 生成token
		String token = UUID.randomUUID().toString();
		
		// 将用户session写入redis
		jedisClient.set(REDIS_USER_SESSION_KEY + ":" + token, JsonUtils.objectToJson(user));
		
		// 设置过期时间
		jedisClient.expire(REDIS_USER_SESSION_KEY + ":" + token, SSO_SESSION_EXPIRE);
		
		// 返回token
		return TaotaoResult.ok(token);
	}

	/*
	 *  通过token查询用户信息
	 */
	@Override
	public TaotaoResult getUserDataByToken(String token) {
		// 通过token查询用户信息
		String json = jedisClient.get(REDIS_USER_SESSION_KEY + ":" + token);
		
		// 判断是否过期
		if (StringUtils.isBlank(json)) {
			return TaotaoResult.build(400, "此session已经过期，请重新登录");
		}
		
		// 更新过期时间
		jedisClient.expire(REDIS_USER_SESSION_KEY + ":" + token, SSO_SESSION_EXPIRE);
		
		// 返回用户信息
		return TaotaoResult.ok(json);
	}

}
